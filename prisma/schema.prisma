// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  emailHash  String   @unique @map("email_hash")
  createdAt  DateTime @default(now()) @map("created_at")

  profile          Profile?
  proposals        Proposal[]
  decisions        Decision[]
  events           Event[]
  deletionRequests DeletionRequest[]
  intents          Intent[]
  plans            Plan[]
  connectors       Connector[]
  memories         Memory[]
  observations     Observation[]
  nudges           Nudge[]

  @@map("users")
}

model Profile {
  id              String  @id @default(cuid())
  userId          String  @unique @map("user_id")
  tz              String  @default("Asia/Tokyo")
  displayName     String? @map("display_name")
  commuteMinutes  Int?    @map("commute_minutes")
  sleepWindow     String? @map("sleep_window")
  ngHoursJson     String? @map("ng_hours_json")
  mobilityPref    String? @map("mobility_pref")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Proposal {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  payloadJson String   @map("payload_json")
  createdAt   DateTime @default(now()) @map("created_at")

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  decisions Decision[]

  @@map("proposals")
}

model Decision {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  proposalId  String   @map("proposal_id")
  icsBlob     String   @map("ics_blob")
  minutesBack Int      @map("minutes_back")
  decidedAt   DateTime @default(now()) @map("decided_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([userId, decidedAt])
  @@map("decisions")
}

model Event {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  source      String
  minutesBack Int?     @map("minutes_back")
  metaJson    String?  @map("meta_json")
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("events")
}

model DeletionRequest {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  status      String   @default("pending")
  requestedAt DateTime @default(now()) @map("requested_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deletion_requests")
}

// MVP+ テーブル追加
model Intent {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  text      String
  json      String   @map("json")
  createdAt DateTime @default(now()) @map("created_at")

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  plans Plan[]

  @@map("intents")
}

model Plan {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  intentId    String   @map("intent_id")
  actionsJson String   @map("actions_json")
  createdAt   DateTime @default(now()) @map("created_at")

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  intent     Intent      @relation(fields: [intentId], references: [id], onDelete: Cascade)
  executions Execution[]

  @@index([userId, createdAt])
  @@map("plans")
}

model Execution {
  id          String   @id @default(cuid())
  planId      String   @map("plan_id")
  status      String   @default("pending")
  resultsJson String?  @map("results_json")
  createdAt   DateTime @default(now()) @map("created_at")

  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId, createdAt])
  @@map("executions")
}

model Connector {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  provider   String
  enabled    Boolean  @default(true)
  scopesJson String?  @map("scopes_json")
  createdAt  DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@map("connectors")
}

// Doraemon Mode: Memory OS
model Memory {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  kind       String    // preference|fact|alias|goal|routine|relationship_note|autopilot_rule
  key        String
  valueJson  String    @map("value_json")
  source     String?   // utterance|action|calendar|message_meta|import|manual
  confidence Float?    @default(1.0)
  expiresAt  DateTime? @map("expires_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@index([userId, key])
  @@map("memories")
}

// Doraemon Mode: Proactive OS - Observations
model Observation {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  signal      String   // free_slot|relationship_gap|deadline_near|habit_window|location|open_loop
  payloadJson String   @map("payload_json")
  observedAt  DateTime @default(now()) @map("observed_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, observedAt])
  @@map("observations")
}

// Doraemon Mode: Proactive OS - Nudges
model Nudge {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  summary    String
  planJson   String    @map("plan_json")
  reasonKeys String[]  @map("reason_keys")
  status     String    @default("shown") // shown|accepted|dismissed|snoozed|expired
  createdAt  DateTime  @default(now()) @map("created_at")
  resolvedAt DateTime? @map("resolved_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("nudges")
}

// Doraemon Mode: Relationship Graph
model ContactGraph {
  userId      String    @map("user_id")
  contactId   String    @map("contact_id")
  tieStrength Float?    @map("tie_strength")
  lastMetAt   DateTime? @map("last_met_at")
  lastMsgAt   DateTime? @map("last_msg_at")
  cadenceDays Int?      @map("cadence_days")
  channelsJson String?  @map("channels_json")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@id([userId, contactId])
  @@index([userId, updatedAt])
  @@map("contact_graph")
}

// Doraemon Mode: Availability
model Availability {
  userId     String   @map("user_id")
  date       DateTime @db.Date
  slotsJson  String   @map("slots_json")
  source     String?  // calendar|manual
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@id([userId, date])
  @@map("availability")
}
