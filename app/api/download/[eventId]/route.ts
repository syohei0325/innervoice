export const runtime = 'nodejs';

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function GET(
  request: NextRequest,
  { params }: { params: { eventId: string } }
) {
  try {
    const { eventId } = params;
    
    // Try to find the decision with this event ID in the ics_blob
    // For MVP, we'll generate content on-the-fly since we store eventId in URL
    const mockUserId = 'user_mock_001';
    
    let icsContent: string;
    
    try {
      // Try to find existing decision (simplified lookup)
      const decision = await prisma.decision.findFirst({
        where: {
          userId: mockUserId,
          icsBlob: { contains: eventId }
        },
        orderBy: { decidedAt: 'desc' }
      });
      
      if (decision) {
        icsContent = decision.icsBlob;
      } else {
        throw new Error('Decision not found');
      }
    } catch (dbError) {
      console.error('DB lookup failed, generating fallback .ics:', dbError);
      
      // Fallback: Generate basic .ics content
      const now = new Date();
      const startTime = new Date(now);
      startTime.setHours(9, 0, 0, 0); // Default to 9:00 AM tomorrow
      startTime.setDate(startTime.getDate() + 1);
      
      const endTime = new Date(startTime);
      endTime.setMinutes(endTime.getMinutes() + 20); // Default 20 minutes
      
      icsContent = `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//InnerVoice//EN
BEGIN:VEVENT
UID:${eventId}@innervoice.app
DTSTART:${startTime.toISOString().replace(/[-:]/g, '').split('.')[0]}Z
DTEND:${endTime.toISOString().replace(/[-:]/g, '').split('.')[0]}Z
SUMMARY:InnerVoice タスク
DESCRIPTION:Generated by InnerVoice (20分)
END:VEVENT
END:VCALENDAR`;
    }

    return new NextResponse(icsContent, {
      status: 200,
      headers: {
        'Content-Type': 'text/calendar; charset=utf-8',
        'Content-Disposition': `attachment; filename="innervoice-${eventId}.ics"`
      }
    });
  } catch (error) {
    console.error('Error in /api/download:', error);
    return NextResponse.json(
      { error: 'Failed to download .ics file' },
      { status: 500 }
    );
  }
}
